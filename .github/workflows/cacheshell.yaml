name: "cacheshell"
on:
  push:
  schedule:
    - cron: '*/10 * * * *'

concurrency: cacheshell
jobs:
  "cacheshell":
    runs-on: ubuntu-latest
    concurrency: cacheshell-${{matrix.jobs.branch}}-${{matrix.jobs.target}}
    steps:
    - { "uses": "actions/checkout@v2", "with": { "ref": "main" } }
    - name: prep
      uses: ./.github/actions/prep
      with:
        sopsAgeKey: "${{ secrets.SOPS_AGE_KEY }}"

    # first off, we're just gonna ignore whatever the old cache has to say
    # TODO: do we need to worry about them overlapping and one cleaning up before the other? idk?

    # original_cache (key)
    - name: cache_key_1
      id: cache_key_1
      shell: bash
      run: |
        echo "setting cache_key_1"
        set -x
        echo "::set-output name=drvPath::$(nix eval --raw '.#devShellSrc.drvPath')"
        echo "::set-output name=outPath::$(nix eval --raw '.#devShellSrc')"
    # original_cache (build)
    - name: "cacheshell"
      run : .github/exec ./nixup cacheshell
    # original_cache (establish)
    - name: cache-setup
      uses: actions/cache@v2
      with:
        path: ./.nixcache/${{ steps.cache_key_1.outputs.outPath }}
        key: ${{ steps.cache_key_1.outputs.outPath }}
    # original_cache (export)
    - name: cache-maybe-save-shell
      shell: bash
      run: |
        set -x
        if [[ ! -f ./.nixcache/${{ steps.cache_key_1.outputs.outPath }}-loaded ]]; then
          nix copy \
            --no-check-sigs \
            --to ./.nixcache/${{ steps.cache_key_1.outputs.outPath }} \
            "${{ steps.cache_key_1.outputs.outPath }}"
        fi

    # TODO:
    # UPDATE INPUTS STEP (in common with advance!)
    - name: local-overrides
      shell: bash
      run: |
        set -x
        # should we just call "otherup" and have the dirs in the right locations?
        ./nixup overrideup

    # do the build with overrides?
    # -(load overrides from file?) 
    # -(have another meta format?)

    # original_cache (key)
    - name: cache_key_2
      id: cache_key_2
      shell: bash
      run: |
        echo "setting cache_key_2"
        set -x
        echo "::set-output name=drvPath::$(nix eval --raw '.#devShellSrc.drvPath')"
        echo "::set-output name=outPath::$(nix eval --raw '.#devShellSrc')"
    # original_cache (build)
    - name: "cacheshell"
      run : .github/exec ./nixup cacheshell
    # original_cache (establish)
    - name: cache-setup
      uses: actions/cache@v2
      with:
        path: ./.nixcache/${{ steps.cache_key_2.outputs.outPath }}
        key: ${{ steps.cache_key_2.outputs.outPath }}
    # original_cache (export)
    - name: cache-maybe-save-shell
      shell: bash
      run: |
        set -x
        if [[ ! -f ./.nixcache/${{ steps.cache_key_2.outputs.outPath }}-loaded ]]; then
          nix copy \
            --no-check-sigs \
            --to ./.nixcache/${{ steps.cache_key_2.outputs.outPath }} \
            "${{ steps.cache_key_2.outputs.outPath }}"
        fi

#! /usr/bin/env bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/stderr 2>&1 && pwd )"
#set +x; source /run/secrets/nixup-secrets; set -x
set -euo pipefail
cd "${DIR}"

function nix() { "${DIR}/misc/nix.sh" "${@}" ; }
function tsip() { tailscale ip --6 "${1}"; }
function update_input() { test -d "${1}/.git" && git -C "${1}" pull --rebase; }
function rebase_input() {
  test -d "${1}" || return;
  git -C "${1}" rebase --abort || true; git -C "${1}" pull --rebase;  git -C "${1}" push origin HEAD -f;
}

export BLDR_X86="${BLDR_X86:-$(tsip slynux)}";
export BLDR_A64="${BLDR_A64:-"cole@pkta64.ts.r10e.tech"}";

rb="./misc/rbuild.sh"
ra="./misc/ractivate.sh"
commbox="${DIR}/misc/commbox.sh"
srcdirs=(
  "nixpkgs/cmpkgs"
  "nixpkgs/cmpkgs-cross-riscv64"
  "nixpkgs/cmpkgs-cross-armv6l"
  "home-manager/cmhm"
  "nixpkgs/master"
  "nixpkgs-wayland"
  "flake-firefox-nightly"
  "mobile-nixos"
  "nix-coreboot"
)
srcdirs=("${srcdirs[@]/#/"${HOME}/code/"}")

orig=("${@}")
cmd="${1:-"z"}"; shift || true


case "${cmd}" in
  "inputup")  for s in "${srcdirs[@]}"; do update_input; rebase_input "$s"; done; ;;
  "pkgup")    ./update.sh "${@:-}";   ;;
  "lockup")   nix "${nixargs[@]}" flake lock --recreate-lock-file --commit-lock-file; ;;
  "shellup")  "${rb}" "${BLDR_X86}" "localhost" ".#devShell.x86_64-linux.inputDerivation"; ;;
  "up")
    "${0}" inputup "${@}" && "${DIR}/misc/rpi/rpipkgs.sh"
    "${0}" lockup "${@}" && "${0}" pkgup "${@}" && "${0}" cacheup "${@}"
  ;;
  "z")
    "${0}" up "${@}" && "${0}" build "${@}"
    "${0}" deploy-x86 "${@}" && "${0}" deploy-a64 "${@}"
  ;;
  "deploy")
    host="${1}"; shift
    # export NIXUP_JOB="/tmp/nixup-deploy-${host}-$(date '+%s')"; mkdir -p "${NIXUP_JOB}"
    # trap "echo ${jobstatus:-"unknown1"} > ${NIXUP_JOB}/deploy.status" EXIT
    # jobstatus="unknown2"

    result="$("${0}" build ".#toplevels.${host}" "${@}")"
    "${ra}" "${result}"
    # jobstatus="good"
  ;;
  "build")
    thing="${1}"; shift; name="$(echo "${thing}" | cut -d '#' -f2-)"
    printf "\n\n###### %s # %s #################################################\n" "BUILD" "${thing}" >/dev/stderr
    # jobdir="${NIXUP_JOB:-"$(mkdir -p "/tmp/nixup-build-${name}/${name}")"}"; mkdir -p "${jobdir}"
    # trap "echo ${jobstatus:-"unknown1"} > ${jobdir}/${thing}-build.status" EXIT; jobstatus="unknown2"
    
    sys="$(nix eval --raw "${thing}" "${@}")"
    if [[ "${sys}" == "aarch64-linux" ]]; then builder="${BLDR_A64}"; fi
    if [[ "${sys}" == "armv6l-linux" ]];  then builder="${BLDR_X86}"; fi
    if [[ "${sys}" == "x86_64-linux" ]];  then builder="${BLDR_X86}"; fi
    
    result="$("${rb}" "${builder}" "cachix" "${thing}" "${@}" -L)"
    # nix build -j0 "${thing}" "${@}" --out-link "${DIR}/result-${thing}"
    nix build -j0 "${result}" --out-link "${DIR}/result-${thing}"
    # jobstatus="good"
  ;;
  "deploy-x86" | "deploy-a64")
    export NIXUP_JOB="$(mktemp -d)"
    env ZELLIJ_LAYOUT_NAME="nixup.${cmd}" \
      zellij --layout-path "${DIR}/${cmd}.zj.yml"
  ;;
esac

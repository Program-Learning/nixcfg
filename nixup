#! /usr/bin/env bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/stderr 2>&1 && pwd )"
set -euo pipefail

function nix() { "${DIR}/misc/nix.sh" "${@}" ; }
function _h1() { printf "\n=======================================================\n${1}\n=======================================================\n" >/dev/stderr; }
function _h2() { printf "\n-- ${1} \n" >/dev/stderr; }

function nixup() { "${0}" "${@}"; }

function nixbuild() { "${DIR}/misc/nixbuild.sh" "${@}"; }
function activate() { "${DIR}/misc/activate.sh" "${@}"; }

srcdirs=(
  "${HOME}/code/nixpkgs/cmpkgs"
  "${HOME}/code/nixpkgs/cmpkgs-cross-riscv64"
  "${HOME}/code/nixpkgs/cmpkgs-cross-armv6l"
  "${HOME}/code/home-manager/cmhm"
  "${HOME}/code/nixpkgs/master"
  "${HOME}/code/nixpkgs-wayland"
  "${HOME}/code/flake-firefox-nightly"
  "${HOME}/code/mobile-nixos"
  "${HOME}/code/nix-coreboot"
)

args=("${@}")
cmd="${args[0]:-"z"}"; args=("${args[@]:1}") || true

case "${cmd}" in
  "pkgup")   _h1 "pkgup";    "${DIR}/pkgs/update.sh" "${args[@]+"${args[@]}"}"; ;;
  "rpiup")   _h1 "rpiup";    "${DIR}/misc/rpi/rpipkgs.sh"; ;;
  "lockup")  _h1 "lockup";   (set -x; cd "${DIR}"; nix "${nixargs[@]}" flake lock --recreate-lock-file --commit-lock-file); ;;
  "shellup") _h1 "shellup";  nixbuild "auto" "cachix:colemickens" ".#cachable"; ;;
  "inputup")
    for s in "${srcdirs[@]}"; do
      _h2 "inputup - ${s}"
      # test -d "${s}/.git" && git -C "${s}" pull --rebase;
      test -d "${s}" || return;
      git -C "${s}" rebase --abort || true; git -C "${s}" pull --rebase;  git -C "${s}" push origin HEAD -f;
    done;
  ;;
  "build")
    set -x
    nixbuild "auto" "cachix:colemickens" "${args[@]+"${args[@]}"}";
  ;;
  "deploy")
    host="${args[0]:-"z"}"; args=("${args[@]:1}") || true
    if [[ "${host}" == "$(hostname)" ]]; then export NIXUP_ACTION="switch"; fi
    if [[ "${host}" == "raisin" ]]; then export NIXUP_ACTION="switch"; fi
    if [[ "${host}" == "xeep" ]]; then export NIXUP_ACTION="switch"; fi
    set +e
    { 
      (set -e;
        printf "${host}=build\n" >> "${NIXUP_LOGDIR:-"/tmp/nixup"}/summary.txt"
        outres="$(nixup build ".#toplevels.${host}" "${args[@]+"${args[@]}"}")";

        printf "${host}=activate\n" >> "${NIXUP_LOGDIR:-"/tmp/nixup"}/summary.txt"
        activate "${NIXUP_ACTION:-"switch"}" "${outres}" "${host}";
      )
    } |& tee "${NIXUP_LOGDIR:-"/tmp/nixup"}/${host}-build-activate.log"
    exit=$?
    printf "${host}=${exit}\n" >> "${NIXUP_LOGDIR:-"/tmp/nixup"}/summary.txt"
    exit ${exit}
  ;;
  "rdeploy")
    export NIXUP_ACTION="reboot"
    nixup deploy "${args[@]:-}";
  ;;
  "xdeploy")
    export NIXUP_HOLD_OPEN=1
    export NIXUP_LOGDIR="$(mktemp -d)"
    printf "start\n${NIXUP_LOGDIR}\n" >> "${NIXUP_LOGDIR}/summary.txt"
    zellij --layout-path "${DIR}/xdeploy.zj.yml"
    echo "${NIXUP_LOGDIR}"
  ;;
  "xrdeploy")
    export NIXUP_ACTION="reboot"
    nixup "xdeploy" "${@}"
  ;;

  "up") _h1 "upup"; true \
    && nixup inputup "${args[@]+"${args[@]}"}" \
    && nixup rpiup "${args[@]+"${args[@]}"}" \
    && nixup lockup "${args[@]+"${args[@]}"}" \
    && nixup pkgup "${args[@]+"${args[@]}"}" \
    && nixup shellup "${args[@]+"${args[@]}"}";
  ;;

  "z") true \
    && nixup up "${args[@]+"${args[@]}"}" \
    && nixup xdeploy "${args[@]+"${args[@]}"}";
  ;;
  
  *) printf "!!! unknown command\n" >/dev/stderr; exit -1; ;;
esac

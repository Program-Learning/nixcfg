#! /usr/bin/env bash
set -euo pipefail
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/stderr 2>&1 && pwd )"
set +x; source /run/secrets/nixup-secrets; set -x

nixargs=(--experimental-features "nix-command flakes") #ca-references ca-derivations recursive-nix")
buildargs=(
  --option 'extra-substituters' 'https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org https://arm.cachix.org https://thefloweringash-armv7.cachix.org'
  --option 'extra-trusted-public-keys' 'colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA= arm.cachix.org-1:5BZ2kjoL1q6nWhlnrbAl+G7ThY7+HaBRD9PZzqZkbnM= thefloweringash-armv7.cachix.org-1:v+5yzBD2odFKeXbmC+OPWVqx4WVoIVO6UXgnSAWFtso='
  --option 'build-cores' '0'
  --option 'narinfo-cache-negative-ttl' '0'
  --builders '
    ssh-ng://cole@porty.ts.r10e.tech x86_64-linux /run/secrets/hydra_queue_runner_id_rsa;
    ssh-ng://cole@rpifour1.ts.r10e.tech aarch64-linux /run/secrets/hydra_queue_runner_id_rsa;'
  --builders-use-substitutes
  --eval-store auto
)
cache="colemickens"

## <ci-packet> #################################################
function packet-script() {
  LABEL="$1"
  RUNNER_TOKEN="${2}"
  set +x
  cat <<-EOF
#!/bin/bash
mkdir actions-runner && cd actions-runner
case \$(uname -m) in aarch64) ARCH="arm64" ;; amd64|x86_64) ARCH="x64" ;; esac && export RUNNER_ARCH=\${ARCH}
useradd -m runner
gpasswd --add runner wheel || true
gpasswd --add runner admin || true
gpasswd --add runner root || true
cd /home/runner
su runner -c "curl -O -L https://github.com/actions/runner/releases/download/v2.280.3/actions-runner-linux-\${RUNNER_ARCH}-2.280.3.tar.gz"
su runner -c "tar xzf ./actions-runner-linux-\${RUNNER_ARCH}-2.280.3.tar.gz"
su runner -c "env DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1 ./config.sh --unattended --url https://github.com/cole-mickens/nixcfg --token ${RUNNER_TOKEN} --labels ${LABEL} --ephemeral"
su runner -c "env DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1 ./run.sh"
EOF
  set -x
}
function packet-curl() { curl -H "X-Auth-Token: ${METAL_AUTH_TOKEN}" "$@" 2>/dev/null; }
function packet-spot() { packet-curl "https://api.packet.net/market/spot/prices" | jq ".spot_market_prices | keys[] as \$k | \"\(\$k) \(.[\$k][\"${1}\"].price)\"" | grep -v null; }
function packet-up() {
  packet-up-int "gha-x64" "c2.medium.x86"
  packet-up-int "gha-arm64" "c2.large.arm"
}
function packet-down() {
  packet-down-int 'gha-x64'
  packet-down-int 'gha-arm64'
}
function packet-up-int() {
  dev="${1}"
  plan="${2}"
  # TODO: find best facility for price+size
  token_x64="$(gh api -X POST /repos/cole-mickens/nixcfg/actions/runners/registration-token | jq -r .token)"
  token_arm64="$(gh api -X POST /repos/cole-mickens/nixcfg/actions/runners/registration-token | jq -r .token)"

  duration="1 hour";
  termtime="$(TZ=UTC date --date="${duration}" --iso-8601=seconds)"

  packet-down-int "${dev}"
  facility="sjc1"
  script="$(mktemp)"
  packet-script "${dev}" "${token_x64}" > "${script}"
  metal device create \
    --hostname "${dev}" \
    --plan "${plan}" \
    --facility "${facility}" \
    --operating-system "ubuntu_18_04" \
    --spot-instance --spot-price-max "0.5" \
    --termination-time="${termtime}" \
    --userdata-file "${script}"

  echo packet-wait "${dev}"
}
function packet-wait() {
  dev="${1}"
  set +x; echo -n "waiting for "${dev}" to finish provisioning."
  while true; do
    status="$(metal device get --output 'json' --search "${1}" | jq -r '.[0].state')"
    if [[ "${status}" != "provisioning" && "${status}" != "queued" ]]; then break; fi
    echo -n "."; sleep 2
  done; echo " done!"; set -x
  ip="$(metal device get --output 'json' --search "${1}" | jq -r '.[0].ip_addresses[] | select((.address_family==4) and (.public==true)).address')"
  ssh-keygen -R "${ip}"
  ssh-keyscan -H "${ip}" >> ~/.ssh/known_hosts

  # wait for runner
  set +x; echo "waiting for ${dev} runner."
  while true; do
    runnerid="$(gh api repos/cole-mickens/nixcfg/actions/runners | jq -r ".runners[] | select (.name == \"${dev}\").id")"
    if [[ "${runnerid:-""}" != "" ]]; then break; fi
    echo "waiting for ${dev} runner, waiting..."; sleep 10
  done; echo " done!"; set -x
}
function packet-down-int() {
  dev="${1}"
  id="$(metal device get --search "${dev}" --output json | jq -r '.[].id' || true)"
  if [[ "${id:-""}" != "" ]]; then
    echo "deleting ${dev}: ${id}, waiting..."; set +x
    while ! metal device delete --force --id "${id}" &>/dev/null; do echo "deleting ${dev}: ${id}, waiting..."; sleep 10; done; set -x
  fi
  runnerid="$(gh api repos/cole-mickens/nixcfg/actions/runners | jq -r ".runners[] | select (.name == \"${dev}\").id")"
  if [[ "${runnerid:-""}" != "" ]]; then
    gh api -X DELETE "repos/cole-mickens/nixcfg/actions/runners/${runnerid}" | jq
  fi
}
## </ci-packet> #################################################

## <ci> #################################################
function _nix() { nix "${nixargs[@]}" "${@}"; }
function _nix_build() { nix "${nixargs[@]}" build "${buildargs[@]}" "${@}"; }
function ci_nb_cache() {
  out="$(mktemp -d)"; rm -rf "${out}" && mkdir -p "${out}"
  
  if nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "-j0" --no-link)" "${buildargs[@]}" "${@}";
  then echo "******** nbu worked, exitting early"; return 0
  else echo "******** nbu did not work..."
  fi

  nix "${nixargs[@]}" build "${buildargs[@]}" --keep-going --out-link "${out}/result" ${@/#/'.#'}
  ls -al "${out}"
  readlink -f "${out}"/result* | cachix push colemickens
}
function ci_check() {
  command nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "-j0" --no-link)" \
    "${buildargs[@]}" "${@}"
}
function up() {
  BASE_BRANCH="${BASE_BRANCH:-"origin/auto-simple-ready"}"
  pushd "${DIR}"
  git remote update
  git rev-parse "${BASE_BRANCH}" && git rebase "${BASE_BRANCH}" || true
  popd
}
function fullup() {
  set -euo pipefail
  srcdirs=( "nixpkgs/cmpkgs"  "home-manager/cmhm"  "nixpkgs/master" "nixpkgs-wayland" "flake-firefox-nightly" )
  printf '%s\n' "${srcdirs[@]}" | \
    parallel --jobs $(nproc) --halt soon,fail=1 --tag --progress -- \
      "[[ ! -d "${HOME}/code/{.}" ]] || (git -C '${HOME}/code/{.}' pull --rebase && git -C '${HOME}/code/{.}' push origin HEAD -f)"
  pushd "${DIR}"
  [[ -f ../nixpkgs-wayland/pkgs/update.sh ]] && cp ../nixpkgs-wayland/pkgs/update.sh ./pkgs/update.sh
  [[ -f ../nixpkgs-wayland/.github/exec ]] && cp ../nixpkgs-wayland/.github/exec .github/exec
  nix "${nixargs[@]}" flake update --no-registries --commit-lock-file
  popd
  pushd "${DIR}/pkgs"
  ./update.sh
  popd
  # cache-shell
  outsh="$(mktemp -d)/result"
  nix build "${nixargs[@]}" "${buildargs[@]}" --out-link "${outsh}" ".#devShell.x86_64-linux.inputDerivation"
  readlink -f "${outsh}" | cachix push colemickens
}
## </ci> #################################################

## <remote> #################################################
#export cachixpkgs="https://github.com/nixos/nixpkgs/archive/$(jq -r '.nodes.stable.locked.rev' ./flake.lock).tar.gz"
#export unstablepkgs="https://github.com/colemickens/nixpkgs/archive/$(jq -r '.nodes.nixpkgs.locked.rev' ./flake.lock).tar.gz"
# this includes the actual `cachix push` command, just send it a path
# function ssh_cachix_push() {
#   set -euo pipefail
#   ssh "${1}" "nix-shell -I nixpkgs=${cachixpkgs} -p cachix --run \
#     'echo ${2} | env CACHIX_SIGNING_KEY=${CACHIX_SIGNING_KEY} cachix push ${cache} >/dev/stderr'" &>/dev/stderr
# }
# # this just wraps the shell, give it the full command: ssh_nixUnstable_shell nix build ...
# function ssh_nixUnstable_shell() {
#   local r="${1}"; shift;
#   ssh "${r}" -- "nix-shell -I nixpkgs=${unstablepkgs} -p nixUnstable --run '$(printf '\"%s\" ' "${@}")'"
# }
# function ssh_nixUnstable_shell2() {
#   local r="${1}"; shift;
#   ssh "${r}" -- "$(printf '\"%s\" ' "${@}")"
# }
# # this just wraps the shell, give it the full command: ssh_niche_shell niche build ...
# function ssh_niche_shell() {
#   local r="${1}"; shift;
#   ssh "${r}" -- "nix-shell -I nixpkgs=${nichepkgs} -p niche -p gnupg -p nixUnstable --command 'NICHE_DEBUG=1 $(printf '\"%s\" ' "${@}")'"
# }
#############
# TODO: assume that we have competent builders, and/or that we can build drvs+copy them again?
# function _remote() {
#   remote="${1}"; buildattr="${2}"; target="${3}"; f="cm-nix-$RANDOM"
#   stash
#   git push origin HEAD -f
#   rev="$(git rev-parse --short HEAD)"
#   thing="github:colemickens/nixcfg/${rev}#${buildattr}"
#   ssh_nixUnstable_shell "$remote" nix "${nixargs[@]}" build "${buildargs[@]}" -L "${thing}" --keep-going --out-link "/tmp/$f"
#   out="$(ssh_nixUnstable_shell "$remote" readlink -f "/tmp/$f")"

#   # target=copy   => copy back
#   # target=cachix => upload cachix, done
#   # target=skip   => do nothing
#   # target=*      => push to cachix, download on target, and activate
#   if [[ "${target}" == "copy" ]]; then
#     nix copy --no-check-sigs --from "ssh://${remote}" "${out}"
#   elif [[ "${target}" == "cachix" ]]; then
#     ssh_cachix_push "${remote}" "${out}"
#   elif [[ "${target}" == "cachixcp" ]]; then
#     ssh_cachix_push "${remote}" "${out}"
#     nix-store "${nixargs[@]}" -r "${out}"
#   elif [[ "${target:-}" != "skip" ]]; then
#     ssh_cachix_push "${remote}" "${out}"
#     ssh_nixUnstable_shell "${target}" nix "${nixargs[@]}" build "${buildargs[@]}" -L --no-link -j0 "${out}"
#     ssh_nixUnstable_shell "${target}" sudo nix "${nixargs[@]}" build --no-link --profile /nix/var/nix/profiles/system "${out}";
#     ssh_nixUnstable_shell "${target}" sudo nix "${nixargs[@]}" shell -vv "${out}" -c switch-to-configuration switch;
#   fi
#   ssh_nixUnstable_shell "${remote}" rm -f "/tmp/$f"
#   printf "${out}"
# }
# function remote() {
#   who="$1"; shift; what="$1"; shift; where="$1"; shift
#   remote "$(ip "${who}")" "${what}" "$(ip "${where}")"
# }
# function ip() {
#   if [[ "${1}" == "$(hostname)" ]]; then printf "%s" "colemickens@aarch64.nixos.community";
#   elif [[ "${1}" == "a64" ]];       then printf "%s" "localhost";
#   else                                   tailscale ip --6 ${1} | head -z -n1;
#   fi
# }
# function pinebook()  { _remote "${a64com}"      "toplevels.pinebook"  "$(ip pinebook)"; }
# function xeep()      { _remote "$(ip xeep)"     "toplevels.xeep"      "$(ip xeep)"; }
# function raisin()    { _remote "$(ip raisin)"   "toplevels.raisin"    "$(ip raisin)"; }
# function jeffhyper() { _remote "$(ip xeep)"     "toplevels.jeffhyper" "$(ip jeffhyper)"; }
# function porty()     { _remote "$(ip porty)"    "toplevels.porty"     "$(ip porty)"; }
# function rpizero1()  { _remote "$(ip porty)"    "toplevels.rpizero1"  "192.168.145.120"; }
# function rpifour1()  { _remote "${a64com}"      "toplevels.rpifour1"  "$(ip rpifour1)"; }
# function sinkor()    { _remote "${a64com}"      "toplevels.sinkor"    "$(ip sinkor)"; }
# function pinephone() { _remote "${a64com}" "toplevels.pinephone"      "$(tsip pinephone)"; }
# function bluephone() { _remote "${a64com}" "toplevels.bluephone"      "$(tsip bluephone)"; }
## </remote> #################################################

if [[ ! -z "${1:-""}" ]]; then cmd="${1}"; shift; fi
if [[ -z "${cmd:-""}" ]]; then
  cmd="up"
fi

set -x
"${cmd}" "${@}"
set +x
echo -e "\nexit=$?"
exit 0

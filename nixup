#! /usr/bin/env bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/stderr 2>&1 && pwd )"
set -euo pipefail
set -x

function __() { printf "\n\n%s\n" "${1}" >/dev/stderr; }
function ts() { echo -e "cole@${1}.ts.r10e.tech"; }
unset NIX_PATH
cd "${DIR}"

cache="colemickens"
cachixpkgs="https://github.com/nixos/nixpkgs/archive/nixos-20.09.tar.gz" # where to find pkgs.cachix
unstablepkgs="https://github.com/nixos/nixpkgs/archive/nixos-unstable.tar.gz" # where to find nixUnstable
set +x; cachixkey="$(cat ~/.config/cachix/cachix.dhall | grep eIu | cut -f 2 -d '"' || echo "")"; set -x

nixargs=(--experimental-features "nix-command flakes") #ca-references ca-derivations recursive-nix")
buildargs=(
  --option 'extra-binary-caches' 'https://cache.nixos.org https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org https://arm.cachix.org https://thefloweringash-armv7.cachix.org'
  --option 'trusted-public-keys' 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA= arm.cachix.org-1:5BZ2kjoL1q6nWhlnrbAl+G7ThY7+HaBRD9PZzqZkbnM= thefloweringash-armv7.cachix.org-1:v+5yzBD2odFKeXbmC+OPWVqx4WVoIVO6UXgnSAWFtso='
  --option 'build-cores' '0'
  --option 'narinfo-cache-negative-ttl' '0'
)

srcdirs=(
  "nixpkgs/cmpkgs"  "home-manager/cmhm"  #"nixpkgs/master"
  "nixpkgs-wayland" "flake-firefox-nightly"
  "mobile-nixos"    "sops-nix"        "wip-pinebook-pro"
  "nixos-veloren"   #"nixos-azure"
)

function update() {
  set -euo pipefail

  cd "${DIR}"; [[ -f ../nixpkgs-wayland/pkgs/update.sh ]] && cp ../nixpkgs-wayland/pkgs/update.sh ./pkgs/update.sh

  __ "updating all (local, override) inputs"
  printf '%s\n' "${srcdirs[@]}" | \
    parallel --jobs $(nproc) --halt soon,fail=1 --tag --progress -- \
      "[[ ! -d "${HOME}/code/{.}" ]] || (git -C '${HOME}/code/{.}' pull --rebase && git -C '${HOME}/code/{.}' push origin HEAD -f)"

  __ "updating all inputs"
  cd "${DIR}"; nix flake update --no-registries --commit-lock-file

  __ "updating our own packages"
  cd "${DIR}/pkgs" && ./update.sh

  stash

  cd "${DIR}"
}

function stash() {
  __ "stashing nixcfg"
  cd "${DIR}";
  git add -A .
  (git commit -m stash && git pull --rebase) || true
  git push origin HEAD -f

  cd "${DIR}"
}

# this includes the actual `cachix push` command, just send it a path
function ssh_cachix_push() {
  set -euo pipefail
  ssh "${1}" "nix-shell -I nixpkgs=${cachixpkgs} -p cachix --run \
    'echo ${2} | env CACHIX_SIGNING_KEY=${cachixkey} cachix push ${cache} >/dev/stderr'" &>/dev/stderr
}
# this just wraps the shell, give it the full command: ssh_nixUnstable_shell nix build ...
function ssh_nixUnstable_shell() {
  local r="${1}"; shift;
  ssh "${r}" -- "nix-shell -I nixpkgs=${unstablepkgs} -p nixUnstable --run '$(printf '\"%s\" ' "${@}")'"
}
function ssh_nixUnstable_shell2() {
  local r="${1}"; shift;
  ssh "${r}" -- "$(printf '\"%s\" ' "${@}")"
}
# this just wraps the shell, give it the full command: ssh_niche_shell niche build ...
function ssh_niche_shell() {
  local r="${1}"; shift;
  ssh "${r}" -- "nix-shell -I nixpkgs=${nichepkgs} -p niche -p gnupg -p nixUnstable --command 'NICHE_DEBUG=1 $(printf '\"%s\" ' "${@}")'"
}

function a64() { build "$1" "${a64com}" "${a64com}"; }
function nix() { command nix "${nixargs[@]}" "${@}"; }
function nb() { command nix "${nixargs[@]}" build "${buildargs[@]}" "${@}"; }
function cache() {
  t=$(mktemp -d)
  nb --out-link $t
  readlink -f $t | cachix push "${cache}"
}

# for use from CI
# "nix build flakes"
# "nix-build legacy"
function nbf() { target="${1}"; shift; command nix "${nixargs[@]}" build -L "${buildargs[@]}" ".#${target}" "${@}"; }
function nbl() { target="${1}"; shift; command nix-build "${buildargs[@]}" -A "${target}" "${@}"; }
function nbu() { target="${1}"; shift; command nix-build-uncached "${buildargs[@]}" -A "${target}" "${@}"; }

function remote() {
  remote="${1}"; buildattr="${2}"; target="${3}"; f="cm-nix-$RANDOM"
  stash
  rev="$(git rev-parse --short HEAD)"
  thing="github:colemickens/nixcfg/${rev}#${buildattr}"
  ssh_nixUnstable_shell "$remote" nix "${nixargs[@]}" build "${buildargs[@]}" -L "${thing}" --out-link "/tmp/$f"
  out="$(ssh_nixUnstable_shell "$remote" readlink -f "/tmp/$f")"

  # target=copy   => copy back
  # target=cachix => upload cachix, done
  # target=skip   => do nothing
  # target=*      => push to cachix, download on target, and activate
  if [[ "${target}" == "copy" ]]; then
    nix copy --no-check-sigs --from "ssh://${remote}" "${out}"
  elif [[ "${target}" == "cachix" ]]; then
    ssh_cachix_push $remote $out
  elif [[ "${target:-}" != "skip" ]]; then
    ssh_cachix_push $remote $out
    ssh_nixUnstable_shell2 "${target}" nix "${nixargs[@]}" build "${buildargs[@]}" -L --no-link -j0 "${out}"
    ssh -A "${target}" "$(printf '\"%s\" ' sudo nix "${nixargs[@]}" build --profile /nix/var/nix/profiles/system "${out}")";
    ssh -A "${target}" "$(printf '\"%s\" ' sudo nix "${nixargs[@]}" shell -vv "${out}" -c switch-to-configuration switch)";
  fi
  ssh_nixUnstable_shell "$remote" rm -f "/tmp/$f"
}

a64com="colemickens@aarch64.nixos.community"

function rpifour1()  { remote "${a64com}"    "toplevels.rpifour1"  "$(ts rpifour1)"; }
function pinebook()  { remote "${a64com}"    "toplevels.pinebook"  "$(ts pinebook)"; }
function xeep()      { remote "$(ts azdev)"  "toplevels.xeep"      "$(ts xeep)"; }
function raisin()    { remote "$(ts raisin)" "toplevels.raisin"    "$(ts raisin)"; }

function pinephone() { remote "${a64com}" "toplevels.pinephone"      "$(ts pinephone)"; }
function pinesd()    { remote "${a64com}" "images.pinephone_bundle"  "copy"; }

function x86_64()  { remote "$(ts azdev)"  "bundles.x86_64-linux"   "cachix"; }
function aarch64() { remote "${a64com}"    "bundles.aarch64-linux"  "cachix"; }

if [[ ! -z "${1:-""}" ]]; then cmd="${1}"; shift; fi

if [[ ! -z "${cmd:-""}" ]]; then
  "${cmd}" "${@}"
else
  stash
  nix flake update --commit-lock-file
  git push origin HEAD
  sudo nixos-rebuild switch --flake ~/code/nixcfg
fi

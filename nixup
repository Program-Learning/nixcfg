#! /usr/bin/env bash
set -euo pipefail
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/stderr 2>&1 && pwd )"
set +x; source /run/secrets/nixup-secrets; set -x
cd "${DIR}"

nixargs=(--experimental-features "nix-command flakes") #ca-references ca-derivations recursive-nix")
buildargs=(
  #--option 'extra-substituters' 'https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org https://arm.cachix.org https://thefloweringash-armv7.cachix.org'
  --option 'extra-binary-caches' 'https://cache.nixos.org https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org https://arm.cachix.org https://thefloweringash-armv7.cachix.org'
  #--option 'extra-trusted-public-keys' 'colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA= arm.cachix.org-1:5BZ2kjoL1q6nWhlnrbAl+G7ThY7+HaBRD9PZzqZkbnM= thefloweringash-armv7.cachix.org-1:v+5yzBD2odFKeXbmC+OPWVqx4WVoIVO6UXgnSAWFtso='
  --option 'trusted-public-keys' 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA= arm.cachix.org-1:5BZ2kjoL1q6nWhlnrbAl+G7ThY7+HaBRD9PZzqZkbnM= thefloweringash-armv7.cachix.org-1:v+5yzBD2odFKeXbmC+OPWVqx4WVoIVO6UXgnSAWFtso='
  --option 'build-cores' '0'
  --option 'narinfo-cache-negative-ttl' '0'
#  --builders "
#    ssh://cole@$(tailscale ip --6 porty) x86_64-linux /run/secrets/hydra_queue_runner_id_rsa - - ;
#    ssh://cole@$(tailscale ip --6 sinkor) aarch64-linux /run/secrets/hydra_queue_runner_id_rsa;"
  --builders-use-substitutes
)
cache="colemickens"

## <ci> #################################################
function _nix() { nix "${nixargs[@]}" "${@}"; }
function _nix_build() { nix "${nixargs[@]}" build "${buildargs[@]}" "${@}"; }
function ci_nb_cache() {
  set -euo pipefail
  out="$(mktemp -d)"; rm -rf "${out}" && mkdir -p "${out}"

  if ci_check "${@}";
  then echo "******** nbu worked, exitting early"; return 0
  else echo "******** nbu did not work..."
  fi

  nix "${nixargs[@]}" build "${buildargs[@]}" --keep-going --out-link "${out}/result" ${@/#/'.#'}
  ls -al "${out}"
  readlink -f "${out}"/result* | tee /dev/stderr | cachix push colemickens
}
function ci_check() {
  set -euo pipefail
  nix-build-uncached \
    -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "-j0" --no-link)" \
    "${buildargs[@]}" "${@}"
}
function ciup() {
  cachix watch-store -j2 "${cache}" & cachixpid=$!
  ci_nb_cache 'bundle'
  trap "kill -INT ${cachixpid}; wait ${cachixpid} || true" EXIT
}
## </ci> #################################################

function up() {
  # TODO: `pkgup` doesn't actually run in CI, arguably the most important bit
  otherup && lockup && pkgup && ciup
}
function pkgup() { pushd pkgs; ./update.sh "${@:-}"; popd; }
function otherup() {
  srcdirs=( "nixpkgs/cmpkgs"  "home-manager/cmhm"  "nixpkgs/master" "nixpkgs-wayland" "flake-firefox-nightly" )
  printf '%s\n' "${srcdirs[@]}" | \
    parallel --jobs $(nproc) --halt soon,fail=1 --tag --progress -- \
      "[[ ! -d "${HOME}/code/{.}" ]] || (git -C '${HOME}/code/{.}' pull --rebase && git -C '${HOME}/code/{.}' push origin HEAD -f)"
}
function lockup() {
  nix "${nixargs[@]}" flake update --no-registries --commit-lock-file
  outsh="$(mktemp -d)"
  nix build "${nixargs[@]}" "${buildargs[@]}" --out-link "${outsh}/result" ".#devShell.x86_64-linux.inputDerivation"
  readlink -f "${outsh}"/result* | tee /dev/stderr | cachix push colemickens
}

## <remote> #################################################
function _remote() {
  remote="${1}"; buildattr="${2}"; target="${3}"; action="${4:-""}"
  out="$(nix eval --raw "${buildattr}")"
  _nix_build --store "ssh-ng://${remote}" --eval-store "auto" "${buildattr}"
  nix copy --no-check-sigs --from "ssh-ng://${remote}" --to "ssh-ng://${target}" "${out}"
  if [[ "${action:-""}" == *activate* ]]; then
    ssh "${target}" "$(printf '\"%s\" ' sudo nix "${nixargs[@]}" build --no-link --profile /nix/var/nix/profiles/system "${out}")"
    ssh "${target}" "$(printf '\"%s\" ' sudo nix "${nixargs[@]}" shell -vv "${out}" -c switch-to-configuration switch)"
  fi
  if [[ "${action:-""}" == *reboot* ]]; then ssh "${target}" "sudo reboot"; fi
}
function tsip() {
  if [[ "${1}" == "$(hostname)" ]]; then printf "%s" "localhost";
  elif [[ "${1}" == "a64com" ]];    then printf "%s" "colemickens@aarch64.nixos.community";
  else                                   tailscale ip --6 ${1} | head -z -n1; fi
}
function pinebook()    { _remote "$(tsip a64com)"  ".#toplevels.pinebook"     "$(tsip pinebook)"    "activate"; }
function xeep()        { _remote "$(tsip xeep)"    ".#toplevels.xeep"         "$(tsip xeep)"        "activate"; }
function raisin()      { _remote "$(tsip raisin)"  ".#toplevels.raisin"       "$(tsip raisin)"      "activate"; }
function jeffhyper()   { _remote "$(tsip xeep)"    ".#toplevels.jeffhyper"    "$(tsip jeffhyper)"   "activate"; }
function porty()       { _remote "$(tsip porty)"   ".#toplevels.porty"        "$(tsip porty)"       "activate"; }
function rpizero1()    { _remote "$(tsip porty)"   ".#toplevels.rpizero1"     "$(tsip rpizero1)"    "activatereboot"; }
function rpizero2()    { _remote "$(tsip porty)"   ".#toplevels.rpizero2"     "$(tsip rpizero2)"    "activate"; }
function rpifour1()    { _remote "$(tsip a64com)"  ".#toplevels.rpifour1"     "$(tsip rpifour1)"    "activate"; }
function rpithreebp1() { _remote "$(tsip sinkor)"  ".#toplevels.rpithreebp1"  "$(tsip rpithreebp1)" "activate"; }
function sinkor()      { _remote "$(tsip a64com)"  ".#toplevels.sinkor"       "$(tsip sinkor)"      "activate"; }
function pinephone()   { _remote "$(tsip a64com)"  ".#toplevels.pinephone"    "$(tsip pinephone)"   "activate"; }
function bluephone()   { _remote "$(tsip a64com)"  ".#toplevels.bluephone"    "$(tsip bluephone)"   "activate"; }
## </remote> #################################################

if [[ ! -z "${1:-""}" ]]; then cmd="${1}"; shift; fi
if [[ -z "${cmd:-""}" ]]; then
  cmd="up"
fi

set -x
"${cmd}" "${@}"
set +x
echo -e "\nexit=$?"
exit 0

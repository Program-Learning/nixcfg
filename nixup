#! /usr/bin/env bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/stderr 2>&1 && pwd )"
set -euo pipefail
set -x

nixargs=(--experimental-features "nix-command flakes") #ca-references ca-derivations recursive-nix")
buildargs=(
  --option 'extra-substituters' 'https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org https://arm.cachix.org https://thefloweringash-armv7.cachix.org'
  --option 'extra-trusted-public-keys' 'colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA= arm.cachix.org-1:5BZ2kjoL1q6nWhlnrbAl+G7ThY7+HaBRD9PZzqZkbnM= thefloweringash-armv7.cachix.org-1:v+5yzBD2odFKeXbmC+OPWVqx4WVoIVO6UXgnSAWFtso='
  --option 'build-cores' '0'
  --option 'narinfo-cache-negative-ttl' '0'
  --builders 'ssh-ng://cole@porty.ts.r10e.tech x86_64-linux; ssh-ng://cole@rpifour1.ts.r10e.tech aarch64-linux'
  --builders-use-substitutes
)

# <ci-gha>
if [[ "${1}" == "gha-init" ]]; then
  # enable SSHD
  mkdir -p ~/.ssh
  chmod og-rw ~/
  >>~/.ssh/authorized_keys echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC9YAN+P0umXeSP/Cgd5ZvoD5gpmkdcrOjmHdonvBbptbMUbI/Zm0WahBDK0jO5vfJ/C6A1ci4quMGCRh98LRoFKFRoWdwlGFcFYcLkuG/AbE8ObNLHUxAwqrdNfIV6z0+zYi3XwVjxrEqyJ/auZRZ4JDDBha2y6Wpru8v9yg41ogeKDPgHwKOf/CKX77gCVnvkXiG5ltcEZAamEitSS8Mv8Rg/JfsUUwULb6yYGh+H6RECKriUAl9M+V11SOfv8MAdkXlYRrcqqwuDAheKxNGHEoGLBk+Fm+orRChckW1QcP89x6ioxpjN9VbJV0JARF+GgHObvvV+dGHZZL1N3jr8WtpHeJWxHPdBgTupDIA5HeL0OCoxgSyyfJncMl8odCyUqE+lqXVz+oURGeRxnIbgJ07dNnX6rFWRgQKrmdV4lt1i1F5Uux9IooYs/42sKKMUQZuBLTN4UzipPQM/DyDO01F0pdcaPEcIO+tp2U6gVytjHhZqEeqAMaUbq7a6ucAuYzczGZvkApc85nIo9jjW+4cfKZqV8BQfJM1YnflhAAplIq6b4Tzayvw1DLXd2c5rae+GlVCsVgpmOFyT6bftSon/HfxwBE4wKFYF7fo7/j6UbAeXwLafDhX+S5zSNR6so1epYlwcMLshXqyJePJNhtsRhpGLd9M3UqyGDAFoOQ== cardno:7126708"

  # activate secrets
  secrets="$(mktemp -d)"
  nix "${nixargs[@]}" build "${buildargs[@]}" --out-link "${secrets}/result" '.#secrets'
  "${secrets}"/result
fi
# </ci-gha>

function __() { printf "\n\n%s\n" "${1}" >/dev/stderr; }
unset NIX_PATH
HOME="${HOME:-"/tmp"}"
cd "${DIR}"

cache="colemickens"
cachixpkgs="https://github.com/nixos/nixpkgs/archive/$(jq -r '.nodes.stable.locked.rev' ./flake.lock).tar.gz" # where to find pkgs.cachix
unstablepkgs="https://github.com/colemickens/nixpkgs/archive/$(jq -r '.nodes.nixpkgs.locked.rev' ./flake.lock).tar.gz" # where to find nixUnstable
set +x
if [[ "${NIXUP_SECRETS:-""}" != "" ]]; then echo "${NIXUP_SECRETS}" > /tmp/nixup-secrets; fi
source "/tmp/nixup-secrets" || source /run/secrets/nixup-secrets || true
[[ -z "${CACHIX_SIGNING_KEY:-""}" ]] && echo "must set CACHIX_SIGNING_KEY" && exit -1
[[ -z "${METAL_AUTH_TOKEN:-""}" ]] && echo "must set METAL_AUTH_TOKEN" && exit -1
[[ -z "${METAL_PROJECT_ID:-""}" ]] && echo "must set METAL_PROJECT_ID" && exit -1
[[ -z "${GITHUB_TOKEN:-""}" ]] && echo "must set GITHUB_TOKEN" && exit -1
export GH_CONFIG_DIR="/tmp/gh" # we don't want to use the user's GH
set -x


srcdirs=(
  "nixpkgs/cmpkgs"  "home-manager/cmhm"  "nixpkgs/master"
  "nixpkgs-wayland" "flake-firefox-nightly"
  "mobile-nixos"    "sops-nix"        "wip-pinebook-pro"
  "nixos-veloren"   #"nixos-azure"
)

# <ci-packet>
function packet-script() {
  LABEL="$1"
  RUNNER_TOKEN="${2}"
  set +x
  cat <<-EOF
#!/bin/bash
mkdir actions-runner && cd actions-runner
case \$(uname -m) in aarch64) ARCH="arm64" ;; amd64|x86_64) ARCH="x64" ;; esac && export RUNNER_ARCH=\${ARCH}
useradd -m runner
cd /home/runner
su runner -c "curl -O -L https://github.com/actions/runner/releases/download/v2.280.3/actions-runner-linux-\${RUNNER_ARCH}-2.280.3.tar.gz"
su runner -c "tar xzf ./actions-runner-linux-\${RUNNER_ARCH}-2.280.3.tar.gz"
su runner -c "env DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1 ./config.sh --unattended --url https://github.com/cole-mickens/nixcfg --token ${RUNNER_TOKEN} --labels ${LABEL} --replace"
su runner -c "env DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1 ./run.sh"
EOF
  set -x
}
function packet-curl() { curl -H "X-Auth-Token: ${METAL_AUTH_TOKEN}" "$@" 2>/dev/null; }
function packet-spot() { packet-curl "https://api.packet.net/market/spot/prices" | jq ".spot_market_prices | keys[] as \$k | \"\(\$k) \(.[\$k][\"${1}\"].price)\"" | grep -v null; }
function packet-up() {
  packet-up-int "gha-x64" "c2.medium.x86"
  packet-up-int "gha-arm64" "c1.large.arm"
}
function packet-down() {
  packet-down-int 'gha-x64'
  packet-down-int 'gha-arm64'
}
function packet-up-int() {
  dev="${1}"
  plan="${2}"
  # TODO: find best facility for price+size
  token_x64="$(gh api -X POST /repos/cole-mickens/nixcfg/actions/runners/registration-token | jq -r .token)"
  token_arm64="$(gh api -X POST /repos/cole-mickens/nixcfg/actions/runners/registration-token | jq -r .token)"

  duration="1 hour";
  termtime="$(TZ=UTC date --date="${duration}" --iso-8601=seconds)"

  packet-down-int "${dev}"
  facility="sjc1"
  script="$(mktemp)"
  packet-script "${dev}" "${token_x64}" > "${script}"
  metal device create \
    --hostname "${dev}" \
    --plan "${plan}" \
    --facility "${facility}" \
    --operating-system "ubuntu_20_04" \
    --spot-instance --spot-price-max "0.5" \
    --termination-time="${termtime}" \
    --userdata-file "${script}"

  echo packet-wait "${dev}"
}
function packet-wait() {
  dev="${1}"
  set +x; echo -n "waiting for "${dev}" to finish provisioning."
  while true; do
    status="$(metal device get --output 'json' --search "${1}" | jq -r '.[0].state')"
    if [[ "${status}" != "provisioning" && "${status}" != "queued" ]]; then break; fi
    echo -n "."; sleep 2
  done; echo " done!"; set -x
  ip="$(metal device get --output 'json' --search "${1}" | jq -r '.[0].ip_addresses[] | select((.address_family==4) and (.public==true)).address')"
  ssh-keygen -R "${ip}"
  ssh-keyscan -H "${ip}" >> ~/.ssh/known_hosts

  # wait for runner
  set +x; echo "waiting for ${dev} runner."
  while true; do
    runnerid="$(gh api repos/cole-mickens/nixcfg/actions/runners | jq -r ".runners[] | select (.name == \"${dev}\").id")"
    if [[ "${runnerid:-""}" != "" ]]; then break; fi
    echo "waiting for ${dev} runner, waiting..."; sleep 10
  done; echo " done!"; set -x
}
function packet-down-int() {
  dev="${1}"
  id="$(metal device get --search "${dev}" --output json | jq -r '.[].id' || true)"
  if [[ "${id:-""}" != "" ]]; then
    echo "deleting ${dev}: ${id}, waiting..."; set +x
    while ! metal device delete --force --id "${id}" &>/dev/null; do echo "deleting ${dev}: ${id}, waiting..."; sleep 10; done; set -x
  fi
  runnerid="$(gh api repos/cole-mickens/nixcfg/actions/runners | jq -r ".runners[] | select (.name == \"${dev}\").id")"
  if [[ "${runnerid:-""}" != "" ]]; then
    gh api -X DELETE "repos/cole-mickens/nixcfg/actions/runners/${runnerid}" | jq
  fi
}
# </ci-packet>

# <ci>
function sanitize_name() {
  name="${1}"
  name="${name//$'-'/$'_'}"
  name="${name//$'#'/$'_'}"
  name="${name//$'.'/$'_'}"
  printf "%s" "${name}"
}
function ci_nb_cache() {
  out="/tmp/$(sanitize_name "${1}")"
  rm -rf "${out}" && mkdir -p "${out}"
  
  if nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "-j0" --no-link)" \
    "${ci_x86_64_targets[@]}" \
    "${buildargs[@]}"; then
    echo "******** nbu worked, exitting early"
    return 0
  else
    echo "******** nbu did not work, exitting early"
  fi

  nix-build "${nixargs[@]}" "${buildargs[@]}" "--out-link" "${out}/result" "${@}"
  ls -al "${out}"
  readlink -f "${out}"/result* | cachix push colemickens
}
function ci_check() {
  command nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "-j0" --no-link)" \
    "${ci_x86_64_targets[@]}" \
    "${buildargs[@]}"
}


function ci_nbu() {
  out="/tmp/$(sanitize_name "${1}")"
  rm -rf "${out}" && mkdir -p "${out}"
  nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "--out-link" "${out}/result")" "${buildargs[@]}"
}
function ci_cache() {
  out="/tmp/$(sanitize_name "${1}")"

  if ! (find ${out} | grep result); then
    return
  fi

  nix "${nixargs[@]}" path-info --json -r ${out}/result* \
    > "${out}-path-info.json"

  jq -r 'map(select(.ca == null and .signatures == null)) | map(.path) | .[]' \
    < "${out}-path-info.json" \
    > "${out}-paths"

  cachix push "${cache}" < "${out}-paths"

  find "${out}" | grep result | cachix push "${cache}"
}
function nbu_check() {
  command nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "-j0" --no-link)" -A "${1}" "${buildargs[@]}"
}
function nbu_check_req() {
  command nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "-j0" --no-link)" \
    -A toplevels.xeep \
    "${buildargs[@]}"
}
## </ci>

function update() {
  set -euo pipefail

  cd "${DIR}"; [[ -f ../nixpkgs-wayland/pkgs/update.sh ]] && cp ../nixpkgs-wayland/pkgs/update.sh ./pkgs/update.sh
  cd "${DIR}"; [[ -f ../nixpkgs-wayland/.github/exec ]] && cp ../nixpkgs-wayland/.github/exec .github/exec

  printf '%s\n' "${srcdirs[@]}" | \
    parallel --jobs $(nproc) --halt soon,fail=1 --tag --progress -- \
      "[[ ! -d "${HOME}/code/{.}" ]] || (git -C '${HOME}/code/{.}' pull --rebase && git -C '${HOME}/code/{.}' push origin HEAD -f)"

  # TODO: maybe some sanity checking here and rollingback here?
  cd "${DIR}"; nix "${nixargs[@]}" flake update --no-registries --commit-lock-file
  cache-shell

  stash
  cd "${DIR}"
}
function update-pkgs() {
  cd "${DIR}/pkgs"
  ./update.sh
  cd "${DIR}"
}
function cache-shell () {
  outsh="$(mktemp -d)/result"
  nix build "${nixargs[@]}" "${buildargs[@]}" --out-link "${outsh}" ".#devShell.x86_64-linux.inputDerivation"
  readlink -f "${outsh}" | cachix push colemickens
}
function stash() {
  __ "stashing nixcfg"
  cd "${DIR}";
  git add -A .
  git commit -m stash && git pull --rebase || true
}

# this includes the actual `cachix push` command, just send it a path
function ssh_cachix_push() {
  set -euo pipefail
  ssh "${1}" "nix-shell -I nixpkgs=${cachixpkgs} -p cachix --run \
    'echo ${2} | env CACHIX_SIGNING_KEY=${CACHIX_SIGNING_KEY} cachix push ${cache} >/dev/stderr'" &>/dev/stderr
}
# this just wraps the shell, give it the full command: ssh_nixUnstable_shell nix build ...
function ssh_nixUnstable_shell() {
  local r="${1}"; shift;
  ssh "${r}" -- "nix-shell -I nixpkgs=${unstablepkgs} -p nixUnstable --run '$(printf '\"%s\" ' "${@}")'"
}
function ssh_nixUnstable_shell2() {
  local r="${1}"; shift;
  ssh "${r}" -- "$(printf '\"%s\" ' "${@}")"
}
# this just wraps the shell, give it the full command: ssh_niche_shell niche build ...
function ssh_niche_shell() {
  local r="${1}"; shift;
  ssh "${r}" -- "nix-shell -I nixpkgs=${nichepkgs} -p niche -p gnupg -p nixUnstable --command 'NICHE_DEBUG=1 $(printf '\"%s\" ' "${@}")'"
}

function remote() {
  remote="${1}"; buildattr="${2}"; target="${3}"; f="cm-nix-$RANDOM"
  stash
  git push origin HEAD -f
  rev="$(git rev-parse --short HEAD)"
  thing="github:colemickens/nixcfg/${rev}#${buildattr}"
  ssh_nixUnstable_shell "$remote" nix "${nixargs[@]}" build "${buildargs[@]}" -L "${thing}" --keep-going --out-link "/tmp/$f"
  out="$(ssh_nixUnstable_shell "$remote" readlink -f "/tmp/$f")"

  # target=copy   => copy back
  # target=cachix => upload cachix, done
  # target=skip   => do nothing
  # target=*      => push to cachix, download on target, and activate
  if [[ "${target}" == "copy" ]]; then
    nix copy --no-check-sigs --from "ssh://${remote}" "${out}"
  elif [[ "${target}" == "cachix" ]]; then
    ssh_cachix_push "${remote}" "${out}"
  elif [[ "${target}" == "cachixcp" ]]; then
    ssh_cachix_push "${remote}" "${out}"
    nix-store "${nixargs[@]}" -r "${out}"
  elif [[ "${target:-}" != "skip" ]]; then
    ssh_cachix_push "${remote}" "${out}"
    ssh_nixUnstable_shell "${target}" nix "${nixargs[@]}" build "${buildargs[@]}" -L --no-link -j0 "${out}"
    ssh_nixUnstable_shell "${target}" sudo nix "${nixargs[@]}" build --no-link --profile /nix/var/nix/profiles/system "${out}";
    ssh_nixUnstable_shell "${target}" sudo nix "${nixargs[@]}" shell -vv "${out}" -c switch-to-configuration switch;
  fi
  ssh_nixUnstable_shell "${remote}" rm -f "/tmp/$f"
  printf "${out}"
}

# TODO: remove after this ships: https://github.com/tailscale/tailscale/issues/2803
function tsip() {
  if [[ "${1}" == "$(hostname)" ]];
  then printf "localhost";
  else tailscale ip --4 ${1} | head -z -n1;
  fi
}

a64com="colemickens@aarch64.nixos.community"
function pinebook()  { remote "${a64com}"      "toplevels.pinebook"  "$(tsip pinebook)"; }
function xeep()      { remote "$(tsip xeep)"   "toplevels.xeep"      "$(tsip xeep)"; }
function raisin()    { remote "$(tsip raisin)" "toplevels.raisin"    "$(tsip raisin)"; }
function jeffhyper() { remote "$(tsip porty)"  "toplevels.jeffhyper" "$(tsip jeffhyper)"; }
function porty()     { remote "$(tsip porty)"  "toplevels.porty"     "$(tsip porty)"; }
function rpizero1()  { remote "$(tsip porty)"  "toplevels.rpizero1"  "192.168.145.120"; }
function rpifour1()  { remote "${a64com}"      "toplevels.rpifour1"  "$(tsip rpifour1)"; }
function sinkor()    { remote "${a64com}"      "toplevels.sinkor"    "$(tsip sinkor)"; }
function install_sinkor()    {
  set -euo pipefail
  stash
  remote "${a64com}" "toplevels.sinkor" "cachix"
  out="$(nix eval --raw ".#toplevels.sinkor.outPath")"
  target="nixos@192.168.133.202"
  SSH_AUTH_SOCK=/run/user/1000/sshagent  ssh-copy-id "${target}"
  scp "hosts/_new/disk.sh" ${target}:/tmp/disk.sh
  ssh "${target}" /tmp/disk.sh install $out
}
function pinephone() { remote "${a64com}" "toplevels.pinephone"      "cole@$(tsip pinephone)"; }
function bluephone() { remote "${a64com}" "toplevels.bluephone"      "cole@$(tsip bluephone)"; }
function pinesd()    { remote "${a64com}" "images.pinephone_bundle"  "copy"; }

function all() {
  ./nixup
  ./nixup xeep
  ./nixup porty
  ./nixup raisin
  #./nixup jeffhyper # retired
  #./nixup sinkor # jfc, who knows, not yet working
  ./nixup rpifour1
  #./nixup pinebook # lol water damage
  #./nixup bluephone # not quite yet
  #./nixup pinephone # not quite yet
}

if [[ ! -z "${1:-""}" ]]; then cmd="${1}"; shift; fi

if [[ ! -z "${cmd:-""}" ]]; then
  "${cmd}" "${@}"
else
  stash
  git rebase origin/auto-update3-ready
  git push
  sudo nixos-rebuild switch --flake ~/code/nixcfg
  readlink -f /run/current-system | cachix push colemickens
fi

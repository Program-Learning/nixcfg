#! /usr/bin/env bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/stderr 2>&1 && pwd )"
set -euo pipefail
set -x

function __() { printf "\n\n%s\n" "${1}" >/dev/stderr; }
unset NIX_PATH
HOME="${HOME:-"/tmp"}"
cd "${DIR}"

cache="colemickens"
cachixpkgs="https://github.com/nixos/nixpkgs/archive/nixos-21.05.tar.gz" # where to find pkgs.cachix
unstablepkgs="https://github.com/nixos/nixpkgs/archive/nixos-unstable.tar.gz" # where to find nixUnstable
set +x
if [[ "${CACHIX_SIGNING_KEY:-}" != "" ]]; then
  cachixkey="${CACHIX_SIGNING_KEY}"
elif gopass show -o 'websites/cachix.org/apikey/colemickens' &>/dev/null; then
  cachixkey="$(cat /run/secrets/cachix.dhall | dhall text binaryCaches | grep colemickens)"
fi
set -x

nixargs=(--experimental-features "nix-command flakes") #ca-references ca-derivations recursive-nix")
buildargs=(
  --option 'extra-binary-caches' 'https://cache.nixos.org https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org https://arm.cachix.org https://thefloweringash-armv7.cachix.org'
  --option 'trusted-public-keys' 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA= arm.cachix.org-1:5BZ2kjoL1q6nWhlnrbAl+G7ThY7+HaBRD9PZzqZkbnM= thefloweringash-armv7.cachix.org-1:v+5yzBD2odFKeXbmC+OPWVqx4WVoIVO6UXgnSAWFtso='
  --option 'build-cores' '0'
  --option 'narinfo-cache-negative-ttl' '0'
)

srcdirs=(
  "nixpkgs/cmpkgs"  "home-manager/cmhm"  #"nixpkgs/master"
  "nixpkgs-wayland" "flake-firefox-nightly"
  "mobile-nixos"    "sops-nix"        "wip-pinebook-pro"
  "nixos-veloren"   #"nixos-azure"
)

# <ci>
function sanitize_name() {
  name="${1}"
  name="${name//$'-'/$'_'}"
  name="${name//$'#'/$'_'}"
  name="${name//$'.'/$'_'}"
  printf "%s" "${name}"
}
function ci_nbu() {
  out="/tmp/$(sanitize_name "${1}")"
  rm -rf "${out}" && mkdir -p "${out}"
  nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "--out-link" "${out}/result")" -A "${1}" -v "${buildargs[@]}" "--out-link" "${out}/result"
}
function ci_cache() {
  out="/tmp/$(sanitize_name "${1}")"

  if ! (find ${out} | grep result); then
    return
  fi

  nix "${nixargs[@]}" path-info --json -r ${out}/result* \
    > "${out}-path-info.json"

  jq -r 'map(select(.ca == null and .signatures == null)) | map(.path) | .[]' \
    < "${out}-path-info.json" \
    > "${out}-paths"

  cachix push "${cache}" < "${out}-paths"

  find "${out}" | grep result | cachix push "${cache}"
}
function nbu_check() {
  command nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "-j0" --no-link)" -A "${1}" "${buildargs[@]}"
}
function nbu_check_req() {
  command nix-build-uncached -build-flags "$(printf '\"%s\" ' "${nixargs[@]}" "${buildargs[@]}" "-j0" --no-link)" \
    -A toplevels.jeffhyper \
    "${buildargs[@]}"
}
## </ci>

function update() {
  set -euo pipefail

  cd "${DIR}"; [[ -f ../nixpkgs-wayland/pkgs/update.sh ]] && cp ../nixpkgs-wayland/pkgs/update.sh ./pkgs/update.sh
  cd "${DIR}"; [[ -f ../nixpkgs-wayland/.github/exec ]] && cp ../nixpkgs-wayland/.github/exec .github/exec

  printf '%s\n' "${srcdirs[@]}" | \
    parallel --jobs $(nproc) --halt soon,fail=1 --tag --progress -- \
      "[[ ! -d "${HOME}/code/{.}" ]] || (git -C '${HOME}/code/{.}' pull --rebase && git -C '${HOME}/code/{.}' push origin HEAD -f)"

  cd "${DIR}"; nix "${nixargs[@]}" flake update --no-registries --commit-lock-file

  stash
  cd "${DIR}"
}
function update-pkgs() {
  cd "${DIR}/pkgs"
  ./update.sh
  cd "${DIR}"
}
function cache-shell () {
  outsh="$(mktemp -d)/result"
  nix build --out-link "${outsh}" ".#devShell.x86_64-linux.inputDerivation"
  readlink -f "${outsh}" | cachix push colemickens
}
function stash() {
  __ "stashing nixcfg"
  cd "${DIR}";
  git add -A .
  (git commit -m stash && git pull --rebase) || true
}

# this includes the actual `cachix push` command, just send it a path
function ssh_cachix_push() {
  set -euo pipefail
  ssh "${1}" "nix-shell -I nixpkgs=${cachixpkgs} -p cachix --run \
    'echo ${2} | env CACHIX_SIGNING_KEY=${cachixkey} cachix push ${cache} >/dev/stderr'" &>/dev/stderr
}
# this just wraps the shell, give it the full command: ssh_nixUnstable_shell nix build ...
function ssh_nixUnstable_shell() {
  local r="${1}"; shift;
  ssh "${r}" -- "nix-shell -I nixpkgs=${unstablepkgs} -p nixUnstable --run '$(printf '\"%s\" ' "${@}")'"
}
function ssh_nixUnstable_shell2() {
  local r="${1}"; shift;
  ssh "${r}" -- "$(printf '\"%s\" ' "${@}")"
}
# this just wraps the shell, give it the full command: ssh_niche_shell niche build ...
function ssh_niche_shell() {
  local r="${1}"; shift;
  ssh "${r}" -- "nix-shell -I nixpkgs=${nichepkgs} -p niche -p gnupg -p nixUnstable --command 'NICHE_DEBUG=1 $(printf '\"%s\" ' "${@}")'"
}

function remote() {
  remote="${1}"; buildattr="${2}"; target="${3}"; f="cm-nix-$RANDOM"
  stash
  git push origin HEAD -f
  rev="$(git rev-parse --short HEAD)"
  thing="github:colemickens/nixcfg/${rev}#${buildattr}"
  ssh_nixUnstable_shell "$remote" nix "${nixargs[@]}" build "${buildargs[@]}" -L "${thing}" --keep-going --out-link "/tmp/$f"
  out="$(ssh_nixUnstable_shell "$remote" readlink -f "/tmp/$f")"

  # target=copy   => copy back
  # target=cachix => upload cachix, done
  # target=skip   => do nothing
  # target=*      => push to cachix, download on target, and activate
  if [[ "${target}" == "copy" ]]; then
    nix copy --no-check-sigs --from "ssh://${remote}" "${out}"
  elif [[ "${target}" == "cachix" ]]; then
    ssh_cachix_push "${remote}" "${out}"
  elif [[ "${target}" == "cachixcp" ]]; then
    ssh_cachix_push "${remote}" "${out}"
    nix-store "${nixargs[@]}" -r "${out}"
  elif [[ "${target:-}" != "skip" ]]; then
    ssh_cachix_push "${remote}" "${out}"
    ssh_nixUnstable_shell "${target}" nix "${nixargs[@]}" build "${buildargs[@]}" -L --no-link -j0 "${out}"
    ssh_nixUnstable_shell "${target}" sudo nix "${nixargs[@]}" build --no-link --profile /nix/var/nix/profiles/system "${out}";
    ssh_nixUnstable_shell "${target}" sudo nix "${nixargs[@]}" shell -vv "${out}" -c switch-to-configuration switch;
  fi
  ssh_nixUnstable_shell "${remote}" rm -f "/tmp/$f"
  printf "${out}"
}

a64com="colemickens@aarch64.nixos.community"

function rpifour1()  { remote "${a64com}"                       "toplevels.rpifour1"  "cole@$(tailscale ip --4 rpifour1)"; }
function pinebook()  { remote "${a64com}"                       "toplevels.pinebook"  "cole@$(tailscale ip --4 pinebook)"; }
function xeep()      { remote "cole@$(tailscale ip --4 xeep)"   "toplevels.xeep"      "cole@$(tailscale ip --4 xeep)"; }
function raisin()    { remote "cole@$(tailscale ip --4 raisin)" "toplevels.raisin"    "cole@$(tailscale ip --4 raisin)"; }
function jeffhyper() { remote "cole@$(tailscale ip --4 raisin)" "toplevels.jeffhyper" "cole@$(tailscale ip --4 jeffhyper)"; }
function porty()     { remote "cole@$(tailscale ip --4 raisin)" "toplevels.porty"     "cole@$(tailscale ip --4 porty)"; }
function sinkor()    { remote "${a64com}"                       "toplevels.sinkor"    "cole@$(tailscale ip --4 sinkor)"; }
function install_sinkor()    {
  set -euo pipefail
  stash
  remote "${a64com}" "toplevels.sinkor" "cachix"
  out="$(nix eval --raw ".#toplevels.sinkor.outPath")"
  target="nixos@192.168.133.202"
  SSH_AUTH_SOCK=/run/user/1000/sshagent  ssh-copy-id "${target}"
  scp "hosts/_new/disk.sh" ${target}:/tmp/disk.sh
  ssh "${target}" /tmp/disk.sh install $out
}
function pinephone() { remote "${a64com}" "toplevels.pinephone"      "cole@$(tailscale ip --4 pinephone)"; }
function pinesd()    { remote "${a64com}" "images.pinephone_bundle"  "copy"; }

function x86_64()  { remote "$(ts azdev)"  "bundles.x86_64-linux"   "cachix"; }
function aarch64() { remote "${a64com}"    "bundles.aarch64-linux"  "cachix"; }

if [[ ! -z "${1:-""}" ]]; then cmd="${1}"; shift; fi

if [[ ! -z "${cmd:-""}" ]]; then
  "${cmd}" "${@}"
else
  stash
  update
  update-pkgs
  git rebase -i origin/auto-update-ready || true
  out="/tmp/${RANDOM}"
  nix-build -A "toplevels.$(hostname)" --out-link "${out}"
  readlink -f /run/current-system | cachix push colemickens
  cache-shell
  sudo nix-env --set --profile "/nix/var/nix/profiles/system" "${out}"
  sudo "${out}/bin/switch-to-configuration" switch
fi

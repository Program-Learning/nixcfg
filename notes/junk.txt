
      # TODO:
      # - use bootspec to compose a multi-arch image
      # - that can be 'dd'd or synced frm any-arch machine  
      # installer =
      #   let
      #     installer = pkgs.iso;
      #   in
      #   forAllSystems (s: installer);
      # - bundle the installer script
      # - the installer script should also manage host ssh/age keys + secrets re-provisioning


      # images = nixlib.genAttrs [ "rpizero1" "rpizero2" ] (h:
      #   nixosConfigurations.${h}.config.system.build.sdImage);

      # linuxVMs = {
      #   demovm = inputs.self.nixosConfigurations.demovm.config.system.build.vm;
      #   testipfsvm = inputs.self.nixosConfigurations.testipfsvm.config.system.build.vm;
      # };
      # winVMs = {
      #   nixwinvm = import ./hosts/nixwinvm {
      #     pkgs = pkgs_.nixpkgs.x86_64-linux;
      #     inherit inputs;
      #   };
      # };

      # experiments = {
      #   nixbox = {
      #     dash = import ./hosts/nixbox/dashboard.nix { inherit inputs; };
      #     linux = import ./hosts/nixbox/linux.nix { inherit inputs; };
      #   };
      # };
    };
      
      
      
      
      
      
      
      
      
      
      
      
      # netbootsCross =
      #   let
      #     crossModule1 = crossSystem: ({ config, lib, ... }: {
      #       nixpkgs.localSystem = { system = "x86_64-linux"; };
      #       nixpkgs.crossSystem = crossSystem;
      #     });
      #     crossNfsboot = h:
      #       (crossSystems h _system).config.system.build.extras.nfsboot;

      #     crossModule2 = crossSystem: ({ config, lib, ... }: {
      #       # nixpkgs.localSystem = { system = "x86_64-linux"; };
      #       nixpkgs.crossSystem = crossSystem;
      #     });
      #     makeNfsbootCross = h: crossSystem:
      #       (nixosConfigurations.${h}.extendModules {
      #         modules = [ (crossModule1 crossSystem) ];
      #       }).config.system.build.extras.nfsboot;
      #     makeNfsbootCross2 = h: crossSystem:
      #       (mkSystem_ inputs.rpipkgs "x86_64-linux" h [ (crossModule2 crossSystem) ]).config.system.build.extras.nfsboot;
      #   in
      #   {
      #     rpifour1a = makeNfsbootCross "rpifour1" { system = "aarch64-linux"; };
      #     rpifour1b = makeNfsbootCross "rpifour1" { system = "aarch64-linux"; };
      #     rpifour2 = makeNfsbootCross2 "rpifour2" { system = "aarch64-linux"; };
      #     rpithreebp1 = makeNfsbootCross "rpithreebp1" { system = "aarch64-linux"; };
      #   };
